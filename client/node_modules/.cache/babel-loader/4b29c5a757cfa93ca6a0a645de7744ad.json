{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WS = void 0;\n\nconst transport_js_1 = require(\"../transport.js\");\n\nconst parseqs_js_1 = require(\"../contrib/parseqs.js\");\n\nconst yeast_js_1 = require(\"../contrib/yeast.js\");\n\nconst util_js_1 = require(\"../util.js\");\n\nconst websocket_constructor_js_1 = require(\"./websocket-constructor.js\");\n\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\n\n\nconst engine_io_parser_1 = require(\"engine.io-parser\");\n\nconst debug = (0, debug_1.default)(\"engine.io-client:websocket\"); // debug()\n// detect ReactNative environment\n\nconst isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\n\nclass WS extends transport_js_1.Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n    this.supportsBinary = !opts.forceBase64;\n  }\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n\n\n  get name() {\n    return \"websocket\";\n  }\n  /**\n   * Opens socket.\n   *\n   * @api private\n   */\n\n\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n\n    const uri = this.uri();\n    const protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n    const opts = isReactNative ? {} : (0, util_js_1.pick)(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n\n    try {\n      this.ws = websocket_constructor_js_1.usingBrowserWebSocket && !isReactNative ? protocols ? new websocket_constructor_js_1.WebSocket(uri, protocols) : new websocket_constructor_js_1.WebSocket(uri) : new websocket_constructor_js_1.WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emitReserved(\"error\", err);\n    }\n\n    this.ws.binaryType = this.socket.binaryType || websocket_constructor_js_1.defaultBinaryType;\n    this.addEventListeners();\n  }\n  /**\n   * Adds event listeners to the socket\n   *\n   * @api private\n   */\n\n\n  addEventListeners() {\n    this.ws.onopen = () => {\n      if (this.opts.autoUnref) {\n        this.ws._socket.unref();\n      }\n\n      this.onOpen();\n    };\n\n    this.ws.onclose = closeEvent => this.onClose({\n      description: \"websocket connection closed\",\n      context: closeEvent\n    });\n\n    this.ws.onmessage = ev => this.onData(ev.data);\n\n    this.ws.onerror = e => this.onError(\"websocket error\", e);\n  }\n  /**\n   * Writes data to socket.\n   *\n   * @param {Array} array of packets.\n   * @api private\n   */\n\n\n  write(packets) {\n    this.writable = false; // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n      (0, engine_io_parser_1.encodePacket)(packet, this.supportsBinary, data => {\n        // always create a new object (GH-437)\n        const opts = {};\n\n        if (!websocket_constructor_js_1.usingBrowserWebSocket) {\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (this.opts.perMessageDeflate) {\n            const len = // @ts-ignore\n            \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n            if (len < this.opts.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        } // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n\n\n        try {\n          if (websocket_constructor_js_1.usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            this.ws.send(data);\n          } else {\n            this.ws.send(data, opts);\n          }\n        } catch (e) {\n          debug(\"websocket closed before onclose event\");\n        }\n\n        if (lastPacket) {\n          // fake drain\n          // defer to next tick to allow Socket to clear writeBuffer\n          (0, websocket_constructor_js_1.nextTick)(() => {\n            this.writable = true;\n            this.emitReserved(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n  /**\n   * Closes socket.\n   *\n   * @api private\n   */\n\n\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n\n\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    let port = \"\"; // avoid port if default for schema\n\n    if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    } // append timestamp to URI\n\n\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = (0, yeast_js_1.yeast)();\n    } // communicate binary support capabilities\n\n\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    const encodedQuery = (0, parseqs_js_1.encode)(query);\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n  }\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @api public\n   */\n\n\n  check() {\n    return !!websocket_constructor_js_1.WebSocket;\n  }\n\n}\n\nexports.WS = WS;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","WS","transport_js_1","require","parseqs_js_1","yeast_js_1","util_js_1","websocket_constructor_js_1","debug_1","engine_io_parser_1","debug","default","isReactNative","navigator","product","toLowerCase","Transport","constructor","opts","supportsBinary","forceBase64","name","doOpen","check","uri","protocols","pick","extraHeaders","headers","ws","usingBrowserWebSocket","WebSocket","err","emitReserved","binaryType","socket","defaultBinaryType","addEventListeners","onopen","autoUnref","_socket","unref","onOpen","onclose","closeEvent","onClose","description","context","onmessage","ev","onData","data","onerror","e","onError","write","packets","writable","i","length","packet","lastPacket","encodePacket","options","compress","perMessageDeflate","len","Buffer","byteLength","threshold","send","nextTick","setTimeoutFn","doClose","close","query","schema","secure","port","Number","timestampRequests","timestampParam","yeast","b64","encodedQuery","encode","ipv6","hostname","indexOf","path"],"sources":["F:/WebDev/Chat/client/node_modules/engine.io-client/build/cjs/transports/websocket.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WS = void 0;\nconst transport_js_1 = require(\"../transport.js\");\nconst parseqs_js_1 = require(\"../contrib/parseqs.js\");\nconst yeast_js_1 = require(\"../contrib/yeast.js\");\nconst util_js_1 = require(\"../util.js\");\nconst websocket_constructor_js_1 = require(\"./websocket-constructor.js\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst debug = (0, debug_1.default)(\"engine.io-client:websocket\"); // debug()\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nclass WS extends transport_js_1.Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @api {Object} connection options\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Transport name.\n     *\n     * @api public\n     */\n    get name() {\n        return \"websocket\";\n    }\n    /**\n     * Opens socket.\n     *\n     * @api private\n     */\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : (0, util_js_1.pick)(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                websocket_constructor_js_1.usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new websocket_constructor_js_1.WebSocket(uri, protocols)\n                        : new websocket_constructor_js_1.WebSocket(uri)\n                    : new websocket_constructor_js_1.WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType || websocket_constructor_js_1.defaultBinaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @api private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = closeEvent => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent\n        });\n        this.ws.onmessage = ev => this.onData(ev.data);\n        this.ws.onerror = e => this.onError(\"websocket error\", e);\n    }\n    /**\n     * Writes data to socket.\n     *\n     * @param {Array} array of packets.\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            (0, engine_io_parser_1.encodePacket)(packet, this.supportsBinary, data => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!websocket_constructor_js_1.usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (websocket_constructor_js_1.usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                    debug(\"websocket closed before onclose event\");\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    (0, websocket_constructor_js_1.nextTick)(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    /**\n     * Closes socket.\n     *\n     * @api private\n     */\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        let port = \"\";\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n                (\"ws\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = (0, yeast_js_1.yeast)();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        const encodedQuery = (0, parseqs_js_1.encode)(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @api public\n     */\n    check() {\n        return !!websocket_constructor_js_1.WebSocket;\n    }\n}\nexports.WS = WS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}