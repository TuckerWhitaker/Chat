{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\n\nvar socket_io_parser_1 = require(\"socket.io-parser\");\n\nvar on_js_1 = require(\"./on.js\");\n\nvar component_emitter_1 = require(\"@socket.io/component-emitter\");\n\nvar debug_1 = __importDefault(require(\"debug\")); // debug()\n\n\nvar debug = debug_1.default(\"socket.io-client:socket\"); // debug()\n\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\n\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n\nvar Socket = /*#__PURE__*/function (_component_emitter_1$) {\n  _inherits(Socket, _component_emitter_1$);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.connected = false;\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Whether the socket is currently disconnected\n   */\n\n\n  _createClass(Socket, [{\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n\n  }, {\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on_js_1.on(io, \"open\", this.onopen.bind(this)), on_js_1.on(io, \"packet\", this.onpacket.bind(this)), on_js_1.on(io, \"error\", this.onerror.bind(this)), on_js_1.on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for connect()\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      args.unshift(ev);\n      var packet = {\n        type: socket_io_parser_1.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false; // event ack callback\n\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        debug(\"emitting packet with ack id %d\", id);\n        var ack = args.pop();\n\n        this._registerAckCallback(id, ack);\n\n        packet.id = id;\n      }\n\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n      if (discardPacket) {\n        debug(\"discard packet as the transport is not currently writable\");\n      } else if (this.connected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n\n      var timeout = this.flags.timeout;\n\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      } // @ts-ignore\n\n\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            debug(\"removing packet with ack id %d from the buffer\", id);\n\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n\n        debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n\n      this.acks[id] = function () {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        ack.apply(_this2, [null].concat(args));\n      };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this3 = this;\n\n      debug(\"transport is open - connecting\");\n\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this3.packet({\n            type: socket_io_parser_1.PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      debug(\"close (%s)\", reason);\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n\n      switch (packet.type) {\n        case socket_io_parser_1.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n\n          break;\n\n        case socket_io_parser_1.PacketType.EVENT:\n        case socket_io_parser_1.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.ACK:\n        case socket_io_parser_1.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case socket_io_parser_1.PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message); // @ts-ignore\n\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      debug(\"emitting event %j\", args);\n\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n\n        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        debug(\"sending ack %j\", args);\n        self.packet({\n          type: socket_io_parser_1.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n\n      if (\"function\" === typeof ack) {\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {\n        debug(\"bad ack %s\", packet.id);\n      }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      debug(\"socket connected with id %s\", id);\n      this.id = id;\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this4 = this;\n\n      this.receiveBuffer.forEach(function (args) {\n        return _this4.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this4.notifyOutgoingListeners(packet);\n\n        _this4.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      debug(\"server disconnect (%s)\", this.nsp);\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        debug(\"performing disconnect (%s)\", this.nsp);\n        this.packet({\n          type: socket_io_parser_1.PacketType.DISCONNECT\n        });\n      } // remove socket from pool\n\n\n      this.destroy();\n\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n\n      return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * const handler = (event, ...args) => {\n     *   console.log(event);\n     * }\n     *\n     * socket.onAnyOutgoing(handler);\n     *\n     * // then later\n     * socket.offAnyOutgoing(handler);\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }]);\n\n  return Socket;\n}(component_emitter_1.Emitter);\n\nexports.Socket = Socket;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","socket_io_parser_1","require","on_js_1","component_emitter_1","debug_1","debug","default","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","io","nsp","opts","connected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subs","on","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","PacketType","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","notifyOutgoingListeners","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","_anyOutgoingListeners","Emitter"],"sources":["F:/WebDev/Chat/client/node_modules/socket.io-client/build/cjs/socket.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst on_js_1 = require(\"./on.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = debug_1.default(\"socket.io-client:socket\"); // debug()\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nclass Socket extends component_emitter_1.Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on_js_1.on(io, \"open\", this.onopen.bind(this)),\n            on_js_1.on(io, \"packet\", this.onpacket.bind(this)),\n            on_js_1.on(io, \"error\", this.onerror.bind(this)),\n            on_js_1.on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            debug(\"emitting packet with ack id %d\", id);\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    debug(\"removing packet with ack id %d from the buffer\", id);\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * const handler = (event, ...args) => {\n     *   console.log(event);\n     * }\n     *\n     * socket.onAnyOutgoing(handler);\n     *\n     * // then later\n     * socket.offAnyOutgoing(handler);\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\nexports.Socket = Socket;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,IAAMC,kBAAkB,GAAGC,OAAO,CAAC,kBAAD,CAAlC;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAME,mBAAmB,GAAGF,OAAO,CAAC,8BAAD,CAAnC;;AACA,IAAMG,OAAO,GAAGZ,eAAe,CAACS,OAAO,CAAC,OAAD,CAAR,CAA/B,C,CAAmD;;;AACnD,IAAMI,KAAK,GAAGD,OAAO,CAACE,OAAR,CAAgB,yBAAhB,CAAd,C,CAA0D;;AAC1D;AACA;AACA;AACA;;AACA,IAAMC,eAAe,GAAGZ,MAAM,CAACa,MAAP,CAAc;EAClCC,OAAO,EAAE,CADyB;EAElCC,aAAa,EAAE,CAFmB;EAGlCC,UAAU,EAAE,CAHsB;EAIlCC,aAAa,EAAE,CAJmB;EAKlC;EACAC,WAAW,EAAE,CANqB;EAOlCC,cAAc,EAAE;AAPkB,CAAd,CAAxB;;IASMf,M;;;;;EACF;AACJ;AACA;AACA;AACA;EACI,gBAAYgB,EAAZ,EAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;IAAA;;IAAA;;IACvB;IACA,MAAKC,SAAL,GAAiB,KAAjB;IACA,MAAKC,aAAL,GAAqB,EAArB;IACA,MAAKC,UAAL,GAAkB,EAAlB;IACA,MAAKC,GAAL,GAAW,CAAX;IACA,MAAKC,IAAL,GAAY,EAAZ;IACA,MAAKC,KAAL,GAAa,EAAb;IACA,MAAKR,EAAL,GAAUA,EAAV;IACA,MAAKC,GAAL,GAAWA,GAAX;;IACA,IAAIC,IAAI,IAAIA,IAAI,CAACO,IAAjB,EAAuB;MACnB,MAAKA,IAAL,GAAYP,IAAI,CAACO,IAAjB;IACH;;IACD,IAAI,MAAKT,EAAL,CAAQU,YAAZ,EACI,MAAKC,IAAL;IAdmB;EAe1B;EACD;AACJ;AACA;;;;;SACI,eAAmB;MACf,OAAO,CAAC,KAAKR,SAAb;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,qBAAY;MACR,IAAI,KAAKS,IAAT,EACI;MACJ,IAAMZ,EAAE,GAAG,KAAKA,EAAhB;MACA,KAAKY,IAAL,GAAY,CACRzB,OAAO,CAAC0B,EAAR,CAAWb,EAAX,EAAe,MAAf,EAAuB,KAAKc,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAvB,CADQ,EAER5B,OAAO,CAAC0B,EAAR,CAAWb,EAAX,EAAe,QAAf,EAAyB,KAAKgB,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAzB,CAFQ,EAGR5B,OAAO,CAAC0B,EAAR,CAAWb,EAAX,EAAe,OAAf,EAAwB,KAAKiB,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAxB,CAHQ,EAIR5B,OAAO,CAAC0B,EAAR,CAAWb,EAAX,EAAe,OAAf,EAAwB,KAAKkB,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAxB,CAJQ,CAAZ;IAMH;IACD;AACJ;AACA;;;;SACI,eAAa;MACT,OAAO,CAAC,CAAC,KAAKH,IAAd;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,mBAAU;MACN,IAAI,KAAKT,SAAT,EACI,OAAO,IAAP;MACJ,KAAKgB,SAAL;MACA,IAAI,CAAC,KAAKnB,EAAL,CAAQ,eAAR,CAAL,EACI,KAAKA,EAAL,CAAQW,IAAR,GALE,CAKc;;MACpB,IAAI,WAAW,KAAKX,EAAL,CAAQoB,WAAvB,EACI,KAAKN,MAAL;MACJ,OAAO,IAAP;IACH;IACD;AACJ;AACA;;;;WACI,gBAAO;MACH,OAAO,KAAKpB,OAAL,EAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAc;MAAA,kCAAN2B,IAAM;QAANA,IAAM;MAAA;;MACVA,IAAI,CAACC,OAAL,CAAa,SAAb;MACA,KAAKC,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsBH,IAAtB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,cAAKI,EAAL,EAAkB;MACd,IAAIjC,eAAe,CAACkC,cAAhB,CAA+BD,EAA/B,CAAJ,EAAwC;QACpC,MAAM,IAAIE,KAAJ,CAAU,MAAMF,EAAN,GAAW,4BAArB,CAAN;MACH;;MAHa,mCAANJ,IAAM;QAANA,IAAM;MAAA;;MAIdA,IAAI,CAACC,OAAL,CAAaG,EAAb;MACA,IAAMG,MAAM,GAAG;QACXC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAnB,CAA8BC,KADzB;QAEXC,IAAI,EAAEX;MAFK,CAAf;MAIAO,MAAM,CAACK,OAAP,GAAiB,EAAjB;MACAL,MAAM,CAACK,OAAP,CAAeC,QAAf,GAA0B,KAAK1B,KAAL,CAAW0B,QAAX,KAAwB,KAAlD,CAVc,CAWd;;MACA,IAAI,eAAe,OAAOb,IAAI,CAACA,IAAI,CAACc,MAAL,GAAc,CAAf,CAA9B,EAAiD;QAC7C,IAAMC,EAAE,GAAG,KAAK9B,GAAL,EAAX;QACAhB,KAAK,CAAC,gCAAD,EAAmC8C,EAAnC,CAAL;QACA,IAAMC,GAAG,GAAGhB,IAAI,CAACiB,GAAL,EAAZ;;QACA,KAAKC,oBAAL,CAA0BH,EAA1B,EAA8BC,GAA9B;;QACAT,MAAM,CAACQ,EAAP,GAAYA,EAAZ;MACH;;MACD,IAAMI,mBAAmB,GAAG,KAAKxC,EAAL,CAAQyC,MAAR,IACxB,KAAKzC,EAAL,CAAQyC,MAAR,CAAeC,SADS,IAExB,KAAK1C,EAAL,CAAQyC,MAAR,CAAeC,SAAf,CAAyBC,QAF7B;MAGA,IAAMC,aAAa,GAAG,KAAKpC,KAAL,CAAWqC,QAAX,KAAwB,CAACL,mBAAD,IAAwB,CAAC,KAAKrC,SAAtD,CAAtB;;MACA,IAAIyC,aAAJ,EAAmB;QACftD,KAAK,CAAC,2DAAD,CAAL;MACH,CAFD,MAGK,IAAI,KAAKa,SAAT,EAAoB;QACrB,KAAK2C,uBAAL,CAA6BlB,MAA7B;QACA,KAAKA,MAAL,CAAYA,MAAZ;MACH,CAHI,MAIA;QACD,KAAKvB,UAAL,CAAgB0C,IAAhB,CAAqBnB,MAArB;MACH;;MACD,KAAKpB,KAAL,GAAa,EAAb;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;;;;WACI,8BAAqB4B,EAArB,EAAyBC,GAAzB,EAA8B;MAAA;;MAC1B,IAAMW,OAAO,GAAG,KAAKxC,KAAL,CAAWwC,OAA3B;;MACA,IAAIA,OAAO,KAAKC,SAAhB,EAA2B;QACvB,KAAK1C,IAAL,CAAU6B,EAAV,IAAgBC,GAAhB;QACA;MACH,CALyB,CAM1B;;;MACA,IAAMa,KAAK,GAAG,KAAKlD,EAAL,CAAQmD,YAAR,CAAqB,YAAM;QACrC,OAAO,MAAI,CAAC5C,IAAL,CAAU6B,EAAV,CAAP;;QACA,KAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,MAAI,CAAC/C,UAAL,CAAgB8B,MAApC,EAA4CiB,CAAC,EAA7C,EAAiD;UAC7C,IAAI,MAAI,CAAC/C,UAAL,CAAgB+C,CAAhB,EAAmBhB,EAAnB,KAA0BA,EAA9B,EAAkC;YAC9B9C,KAAK,CAAC,gDAAD,EAAmD8C,EAAnD,CAAL;;YACA,MAAI,CAAC/B,UAAL,CAAgBgD,MAAhB,CAAuBD,CAAvB,EAA0B,CAA1B;UACH;QACJ;;QACD9D,KAAK,CAAC,gDAAD,EAAmD8C,EAAnD,EAAuDY,OAAvD,CAAL;QACAX,GAAG,CAACiB,IAAJ,CAAS,MAAT,EAAe,IAAI3B,KAAJ,CAAU,yBAAV,CAAf;MACH,CAVa,EAUXqB,OAVW,CAAd;;MAWA,KAAKzC,IAAL,CAAU6B,EAAV,IAAgB,YAAa;QACzB;QACA,MAAI,CAACpC,EAAL,CAAQuD,cAAR,CAAuBL,KAAvB;;QAFyB,mCAAT7B,IAAS;UAATA,IAAS;QAAA;;QAGzBgB,GAAG,CAACb,KAAJ,CAAU,MAAV,GAAiB,IAAjB,SAA0BH,IAA1B;MACH,CAJD;IAKH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAOO,OAAP,EAAe;MACXA,OAAM,CAAC3B,GAAP,GAAa,KAAKA,GAAlB;;MACA,KAAKD,EAAL,CAAQwD,OAAR,CAAgB5B,OAAhB;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,kBAAS;MAAA;;MACLtC,KAAK,CAAC,gCAAD,CAAL;;MACA,IAAI,OAAO,KAAKmB,IAAZ,IAAoB,UAAxB,EAAoC;QAChC,KAAKA,IAAL,CAAU,UAACuB,IAAD,EAAU;UAChB,MAAI,CAACJ,MAAL,CAAY;YAAEC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAnB,CAA8B2B,OAAtC;YAA+CzB,IAAI,EAAJA;UAA/C,CAAZ;QACH,CAFD;MAGH,CAJD,MAKK;QACD,KAAKJ,MAAL,CAAY;UAAEC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAnB,CAA8B2B,OAAtC;UAA+CzB,IAAI,EAAE,KAAKvB;QAA1D,CAAZ;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQiD,GAAR,EAAa;MACT,IAAI,CAAC,KAAKvD,SAAV,EAAqB;QACjB,KAAKwD,YAAL,CAAkB,eAAlB,EAAmCD,GAAnC;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,iBAAQE,MAAR,EAAgBC,WAAhB,EAA6B;MACzBvE,KAAK,CAAC,YAAD,EAAesE,MAAf,CAAL;MACA,KAAKzD,SAAL,GAAiB,KAAjB;MACA,OAAO,KAAKiC,EAAZ;MACA,KAAKuB,YAAL,CAAkB,YAAlB,EAAgCC,MAAhC,EAAwCC,WAAxC;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kBAASjC,MAAT,EAAiB;MACb,IAAMkC,aAAa,GAAGlC,MAAM,CAAC3B,GAAP,KAAe,KAAKA,GAA1C;MACA,IAAI,CAAC6D,aAAL,EACI;;MACJ,QAAQlC,MAAM,CAACC,IAAf;QACI,KAAK5C,kBAAkB,CAAC6C,UAAnB,CAA8B2B,OAAnC;UACI,IAAI7B,MAAM,CAACI,IAAP,IAAeJ,MAAM,CAACI,IAAP,CAAY+B,GAA/B,EAAoC;YAChC,IAAM3B,EAAE,GAAGR,MAAM,CAACI,IAAP,CAAY+B,GAAvB;YACA,KAAKC,SAAL,CAAe5B,EAAf;UACH,CAHD,MAIK;YACD,KAAKuB,YAAL,CAAkB,eAAlB,EAAmC,IAAIhC,KAAJ,CAAU,2LAAV,CAAnC;UACH;;UACD;;QACJ,KAAK1C,kBAAkB,CAAC6C,UAAnB,CAA8BC,KAAnC;QACA,KAAK9C,kBAAkB,CAAC6C,UAAnB,CAA8BmC,YAAnC;UACI,KAAKC,OAAL,CAAatC,MAAb;UACA;;QACJ,KAAK3C,kBAAkB,CAAC6C,UAAnB,CAA8BqC,GAAnC;QACA,KAAKlF,kBAAkB,CAAC6C,UAAnB,CAA8BsC,UAAnC;UACI,KAAKC,KAAL,CAAWzC,MAAX;UACA;;QACJ,KAAK3C,kBAAkB,CAAC6C,UAAnB,CAA8BwC,UAAnC;UACI,KAAKC,YAAL;UACA;;QACJ,KAAKtF,kBAAkB,CAAC6C,UAAnB,CAA8B0C,aAAnC;UACI,KAAKC,OAAL;UACA,IAAMf,GAAG,GAAG,IAAI/B,KAAJ,CAAUC,MAAM,CAACI,IAAP,CAAY0C,OAAtB,CAAZ,CAFJ,CAGI;;UACAhB,GAAG,CAAC1B,IAAJ,GAAWJ,MAAM,CAACI,IAAP,CAAYA,IAAvB;UACA,KAAK2B,YAAL,CAAkB,eAAlB,EAAmCD,GAAnC;UACA;MA3BR;IA6BH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQ9B,MAAR,EAAgB;MACZ,IAAMP,IAAI,GAAGO,MAAM,CAACI,IAAP,IAAe,EAA5B;MACA1C,KAAK,CAAC,mBAAD,EAAsB+B,IAAtB,CAAL;;MACA,IAAI,QAAQO,MAAM,CAACQ,EAAnB,EAAuB;QACnB9C,KAAK,CAAC,iCAAD,CAAL;QACA+B,IAAI,CAAC0B,IAAL,CAAU,KAAKV,GAAL,CAAST,MAAM,CAACQ,EAAhB,CAAV;MACH;;MACD,IAAI,KAAKjC,SAAT,EAAoB;QAChB,KAAKwE,SAAL,CAAetD,IAAf;MACH,CAFD,MAGK;QACD,KAAKjB,aAAL,CAAmB2C,IAAnB,CAAwBnE,MAAM,CAACa,MAAP,CAAc4B,IAAd,CAAxB;MACH;IACJ;;;WACD,mBAAUA,IAAV,EAAgB;MACZ,IAAI,KAAKuD,aAAL,IAAsB,KAAKA,aAAL,CAAmBzC,MAA7C,EAAqD;QACjD,IAAM0C,SAAS,GAAG,KAAKD,aAAL,CAAmBE,KAAnB,EAAlB;;QADiD,2CAE1BD,SAF0B;QAAA;;QAAA;UAEjD,oDAAkC;YAAA,IAAvBE,QAAuB;YAC9BA,QAAQ,CAACvD,KAAT,CAAe,IAAf,EAAqBH,IAArB;UACH;QAJgD;UAAA;QAAA;UAAA;QAAA;MAKpD;;MACD,sDAAWG,KAAX,CAAiB,IAAjB,EAAuBH,IAAvB;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,aAAIe,EAAJ,EAAQ;MACJ,IAAM4C,IAAI,GAAG,IAAb;MACA,IAAIC,IAAI,GAAG,KAAX;MACA,OAAO,YAAmB;QACtB;QACA,IAAIA,IAAJ,EACI;QACJA,IAAI,GAAG,IAAP;;QAJsB,mCAAN5D,IAAM;UAANA,IAAM;QAAA;;QAKtB/B,KAAK,CAAC,gBAAD,EAAmB+B,IAAnB,CAAL;QACA2D,IAAI,CAACpD,MAAL,CAAY;UACRC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAnB,CAA8BqC,GAD5B;UAER/B,EAAE,EAAEA,EAFI;UAGRJ,IAAI,EAAEX;QAHE,CAAZ;MAKH,CAXD;IAYH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,eAAMO,MAAN,EAAc;MACV,IAAMS,GAAG,GAAG,KAAK9B,IAAL,CAAUqB,MAAM,CAACQ,EAAjB,CAAZ;;MACA,IAAI,eAAe,OAAOC,GAA1B,EAA+B;QAC3B/C,KAAK,CAAC,wBAAD,EAA2BsC,MAAM,CAACQ,EAAlC,EAAsCR,MAAM,CAACI,IAA7C,CAAL;QACAK,GAAG,CAACb,KAAJ,CAAU,IAAV,EAAgBI,MAAM,CAACI,IAAvB;QACA,OAAO,KAAKzB,IAAL,CAAUqB,MAAM,CAACQ,EAAjB,CAAP;MACH,CAJD,MAKK;QACD9C,KAAK,CAAC,YAAD,EAAesC,MAAM,CAACQ,EAAtB,CAAL;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;;;;WACI,mBAAUA,EAAV,EAAc;MACV9C,KAAK,CAAC,6BAAD,EAAgC8C,EAAhC,CAAL;MACA,KAAKA,EAAL,GAAUA,EAAV;MACA,KAAKjC,SAAL,GAAiB,IAAjB;MACA,KAAK+E,YAAL;MACA,KAAKvB,YAAL,CAAkB,SAAlB;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,wBAAe;MAAA;;MACX,KAAKvD,aAAL,CAAmB+E,OAAnB,CAA2B,UAAC9D,IAAD;QAAA,OAAU,MAAI,CAACsD,SAAL,CAAetD,IAAf,CAAV;MAAA,CAA3B;MACA,KAAKjB,aAAL,GAAqB,EAArB;MACA,KAAKC,UAAL,CAAgB8E,OAAhB,CAAwB,UAACvD,MAAD,EAAY;QAChC,MAAI,CAACkB,uBAAL,CAA6BlB,MAA7B;;QACA,MAAI,CAACA,MAAL,CAAYA,MAAZ;MACH,CAHD;MAIA,KAAKvB,UAAL,GAAkB,EAAlB;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,wBAAe;MACXf,KAAK,CAAC,wBAAD,EAA2B,KAAKW,GAAhC,CAAL;MACA,KAAKwE,OAAL;MACA,KAAKvD,OAAL,CAAa,sBAAb;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,mBAAU;MACN,IAAI,KAAKN,IAAT,EAAe;QACX;QACA,KAAKA,IAAL,CAAUuE,OAAV,CAAkB,UAACC,UAAD;UAAA,OAAgBA,UAAU,EAA1B;QAAA,CAAlB;QACA,KAAKxE,IAAL,GAAYqC,SAAZ;MACH;;MACD,KAAKjD,EAAL,CAAQ,UAAR,EAAoB,IAApB;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,sBAAa;MACT,IAAI,KAAKG,SAAT,EAAoB;QAChBb,KAAK,CAAC,4BAAD,EAA+B,KAAKW,GAApC,CAAL;QACA,KAAK2B,MAAL,CAAY;UAAEC,IAAI,EAAE5C,kBAAkB,CAAC6C,UAAnB,CAA8BwC;QAAtC,CAAZ;MACH,CAJQ,CAKT;;;MACA,KAAKG,OAAL;;MACA,IAAI,KAAKtE,SAAT,EAAoB;QAChB;QACA,KAAKe,OAAL,CAAa,sBAAb;MACH;;MACD,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQ;MACJ,OAAO,KAAKtB,UAAL,EAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,kBAASsC,SAAT,EAAmB;MACf,KAAK1B,KAAL,CAAW0B,QAAX,GAAsBA,SAAtB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;SACI,eAAe;MACX,KAAK1B,KAAL,CAAWqC,QAAX,GAAsB,IAAtB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,iBAAQG,QAAR,EAAiB;MACb,KAAKxC,KAAL,CAAWwC,OAAX,GAAqBA,QAArB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,eAAM+B,QAAN,EAAgB;MACZ,KAAKH,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;;MACA,KAAKA,aAAL,CAAmB7B,IAAnB,CAAwBgC,QAAxB;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,oBAAWA,QAAX,EAAqB;MACjB,KAAKH,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;;MACA,KAAKA,aAAL,CAAmBtD,OAAnB,CAA2ByD,QAA3B;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAOA,QAAP,EAAiB;MACb,IAAI,CAAC,KAAKH,aAAV,EAAyB;QACrB,OAAO,IAAP;MACH;;MACD,IAAIG,QAAJ,EAAc;QACV,IAAMF,SAAS,GAAG,KAAKD,aAAvB;;QACA,KAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,SAAS,CAAC1C,MAA9B,EAAsCiB,CAAC,EAAvC,EAA2C;UACvC,IAAI2B,QAAQ,KAAKF,SAAS,CAACzB,CAAD,CAA1B,EAA+B;YAC3ByB,SAAS,CAACxB,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;YACA,OAAO,IAAP;UACH;QACJ;MACJ,CARD,MASK;QACD,KAAKwB,aAAL,GAAqB,EAArB;MACH;;MACD,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,wBAAe;MACX,OAAO,KAAKA,aAAL,IAAsB,EAA7B;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,uBAAcG,QAAd,EAAwB;MACpB,KAAKM,qBAAL,GAA6B,KAAKA,qBAAL,IAA8B,EAA3D;;MACA,KAAKA,qBAAL,CAA2BtC,IAA3B,CAAgCgC,QAAhC;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,4BAAmBA,QAAnB,EAA6B;MACzB,KAAKM,qBAAL,GAA6B,KAAKA,qBAAL,IAA8B,EAA3D;;MACA,KAAKA,qBAAL,CAA2B/D,OAA3B,CAAmCyD,QAAnC;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,wBAAeA,QAAf,EAAyB;MACrB,IAAI,CAAC,KAAKM,qBAAV,EAAiC;QAC7B,OAAO,IAAP;MACH;;MACD,IAAIN,QAAJ,EAAc;QACV,IAAMF,SAAS,GAAG,KAAKQ,qBAAvB;;QACA,KAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,SAAS,CAAC1C,MAA9B,EAAsCiB,CAAC,EAAvC,EAA2C;UACvC,IAAI2B,QAAQ,KAAKF,SAAS,CAACzB,CAAD,CAA1B,EAA+B;YAC3ByB,SAAS,CAACxB,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;YACA,OAAO,IAAP;UACH;QACJ;MACJ,CARD,MASK;QACD,KAAKiC,qBAAL,GAA6B,EAA7B;MACH;;MACD,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gCAAuB;MACnB,OAAO,KAAKA,qBAAL,IAA8B,EAArC;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,iCAAwBzD,MAAxB,EAAgC;MAC5B,IAAI,KAAKyD,qBAAL,IAA8B,KAAKA,qBAAL,CAA2BlD,MAA7D,EAAqE;QACjE,IAAM0C,SAAS,GAAG,KAAKQ,qBAAL,CAA2BP,KAA3B,EAAlB;;QADiE,4CAE1CD,SAF0C;QAAA;;QAAA;UAEjE,uDAAkC;YAAA,IAAvBE,QAAuB;YAC9BA,QAAQ,CAACvD,KAAT,CAAe,IAAf,EAAqBI,MAAM,CAACI,IAA5B;UACH;QAJgE;UAAA;QAAA;UAAA;QAAA;MAKpE;IACJ;;;;EA7kBgB5C,mBAAmB,CAACkG,O;;AA+kBzCxG,OAAO,CAACE,MAAR,GAAiBA,MAAjB"},"metadata":{},"sourceType":"script"}