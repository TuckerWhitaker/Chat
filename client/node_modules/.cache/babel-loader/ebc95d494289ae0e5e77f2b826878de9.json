{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _assertThisInitialized = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _inherits = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"F:/WebDev/Chat/client/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\n\nvar index_js_1 = require(\"./transports/index.js\");\n\nvar util_js_1 = require(\"./util.js\");\n\nvar parseqs_js_1 = require(\"./contrib/parseqs.js\");\n\nvar parseuri_js_1 = require(\"./contrib/parseuri.js\");\n\nvar debug_1 = __importDefault(require(\"debug\")); // debug()\n\n\nvar component_emitter_1 = require(\"@socket.io/component-emitter\");\n\nvar engine_io_parser_1 = require(\"engine.io-parser\");\n\nvar debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\n\nvar Socket = /*#__PURE__*/function (_component_emitter_1$) {\n  _inherits(Socket, _component_emitter_1$);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} opts - options\n   * @api public\n   */\n  function Socket(uri) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = (0, parseuri_js_1.parse)(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\n    }\n\n    (0, util_js_1.installTimerFunctions)(_assertThisInitialized(_this), opts);\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n    _this.transports = opts.transports || [\"polling\", \"websocket\"];\n    _this.readyState = \"\";\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = (0, parseqs_js_1.decode)(_this.opts.query);\n    } // set on handshake\n\n\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null; // set on heartbeat\n\n    _this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (_this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        addEventListener(\"beforeunload\", function () {\n          if (_this.transport) {\n            // silently close the transport\n            _this.transport.removeAllListeners();\n\n            _this.transport.close();\n          }\n        }, false);\n      }\n\n      if (_this.hostname !== \"localhost\") {\n        _this.offlineEventListener = function () {\n          _this.onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n\n        addEventListener(\"offline\", _this.offlineEventListener, false);\n      }\n    }\n\n    _this.open();\n\n    return _this;\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      debug('creating transport \"%s\"', name);\n      var query = Object.assign({}, this.opts.query); // append engine.io protocol identifier\n\n      query.EIO = engine_io_parser_1.protocol; // transport name\n\n      query.transport = name; // session id if we already have one\n\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      });\n      debug(\"options: %j\", opts);\n      return new index_js_1.transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this2 = this;\n\n      var transport;\n\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(function () {\n          _this2.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n\n      this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        debug(\"error while creating transport: %s\", e);\n        this.transports.shift();\n        this.open();\n        return;\n      }\n\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      var _this3 = this;\n\n      debug(\"setting transport %s\", transport.name);\n\n      if (this.transport) {\n        debug(\"clearing existing transport %s\", this.transport.name);\n        this.transport.removeAllListeners();\n      } // set up transport\n\n\n      this.transport = transport; // set up transport listeners\n\n      transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", function (reason) {\n        return _this3.onClose(\"transport close\", reason);\n      });\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      var _this4 = this;\n\n      debug('probing transport \"%s\"', name);\n      var transport = this.createTransport(name);\n      var failed = false;\n      Socket.priorWebsocketSuccess = false;\n\n      var onTransportOpen = function onTransportOpen() {\n        if (failed) return;\n        debug('probe transport \"%s\" opened', name);\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            debug('probe transport \"%s\" pong', name);\n            _this4.upgrading = true;\n\n            _this4.emitReserved(\"upgrading\", transport);\n\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n            debug('pausing current transport \"%s\"', _this4.transport.name);\n\n            _this4.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === _this4.readyState) return;\n              debug(\"changing transport and sending upgrade packet\");\n              cleanup();\n\n              _this4.setTransport(transport);\n\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n\n              _this4.emitReserved(\"upgrade\", transport);\n\n              transport = null;\n              _this4.upgrading = false;\n\n              _this4.flush();\n            });\n          } else {\n            debug('probe transport \"%s\" failed', name);\n            var err = new Error(\"probe error\"); // @ts-ignore\n\n            err.transport = transport.name;\n\n            _this4.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n\n      function freezeTransport() {\n        if (failed) return; // Any callback called by transport should be ignored since now\n\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      } // Handle any error that happens while probing\n\n\n      var onerror = function onerror(err) {\n        var error = new Error(\"probe error: \" + err); // @ts-ignore\n\n        error.transport = transport.name;\n        freezeTransport();\n        debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n        _this4.emitReserved(\"upgradeError\", error);\n      };\n\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      } // When the socket is closed while we're probing\n\n\n      function onclose() {\n        onerror(\"socket closed\");\n      } // When the socket is upgraded while we're probing\n\n\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n          freezeTransport();\n        }\n      } // Remove all listeners on the transport and on self\n\n\n      var cleanup = function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n\n        _this4.off(\"close\", onclose);\n\n        _this4.off(\"upgrading\", onupgrade);\n      };\n\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      debug(\"socket open\");\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush(); // we check for `readyState` in case an `open`\n      // listener already closed the socket\n\n      if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n        debug(\"starting upgrade probes\");\n        var i = 0;\n        var l = this.upgrades.length;\n\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n        this.emitReserved(\"packet\", packet); // Socket is live - any packet counts\n\n        this.emitReserved(\"heartbeat\");\n\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n\n          case \"ping\":\n            this.resetPingTimeout();\n            this.sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            break;\n\n          case \"error\":\n            var err = new Error(\"server error\"); // @ts-ignore\n\n            err.code = packet.data;\n            this.onError(err);\n            break;\n\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {\n        debug('packet received with socket readyState \"%s\"', this.readyState);\n      }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.maxPayload = data.maxPayload;\n      this.onOpen(); // In case open handler closes socket\n\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this5 = this;\n\n      this.clearTimeoutFn(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = this.setTimeoutFn(function () {\n        _this5.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n\n      if (this.opts.autoUnref) {\n        this.pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n\n      this.prevBufferLen = 0;\n\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        var packets = this.getWritablePackets();\n        debug(\"flushing %d packets in socket\", packets.length);\n        this.transport.send(packets); // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n\n        this.prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n\n  }, {\n    key: \"getWritablePackets\",\n    value: function getWritablePackets() {\n      var shouldCheckPayloadSize = this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n\n      var payloadSize = 1; // first packet type\n\n      for (var i = 0; i < this.writeBuffer.length; i++) {\n        var data = this.writeBuffer[i].data;\n\n        if (data) {\n          payloadSize += (0, util_js_1.byteLength)(data);\n        }\n\n        if (i > 0 && payloadSize > this.maxPayload) {\n          debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n          return this.writeBuffer.slice(0, i);\n        }\n\n        payloadSize += 2; // separator + packet type\n      }\n\n      debug(\"payload size is %d (max: %d)\", payloadSize, this.maxPayload);\n      return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this6 = this;\n\n      var close = function close() {\n        _this6.onClose(\"forced close\");\n\n        debug(\"socket closing - telling transport to close\");\n\n        _this6.transport.close();\n      };\n\n      var cleanupAndClose = function cleanupAndClose() {\n        _this6.off(\"upgrade\", cleanupAndClose);\n\n        _this6.off(\"upgradeError\", cleanupAndClose);\n\n        close();\n      };\n\n      var waitForUpgrade = function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        _this6.once(\"upgrade\", cleanupAndClose);\n\n        _this6.once(\"upgradeError\", cleanupAndClose);\n      };\n\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (_this6.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      debug(\"socket error %j\", err);\n      Socket.priorWebsocketSuccess = false;\n      this.emitReserved(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket close with reason: \"%s\"', reason); // clear timers\n\n        this.clearTimeoutFn(this.pingTimeoutTimer); // stop event from firing again for transport\n\n        this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n        this.transport.close(); // ignore further transport communication\n\n        this.transport.removeAllListeners();\n\n        if (typeof removeEventListener === \"function\") {\n          removeEventListener(\"offline\", this.offlineEventListener, false);\n        } // set ready state\n\n\n        this.readyState = \"closed\"; // clear session id\n\n        this.id = null; // emit close event\n\n        this.emitReserved(\"close\", reason, description); // clean buffers after, so users can still\n        // grab the buffers on `close` event\n\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n      }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n\n      return filteredUpgrades;\n    }\n  }]);\n\n  return Socket;\n}(component_emitter_1.Emitter);\n\nexports.Socket = Socket;\nSocket.protocol = engine_io_parser_1.protocol;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","index_js_1","require","util_js_1","parseqs_js_1","parseuri_js_1","debug_1","component_emitter_1","engine_io_parser_1","debug","default","uri","opts","parse","hostname","host","secure","protocol","port","query","installTimerFunctions","location","transports","readyState","writeBuffer","prevBufferLen","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","description","open","name","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","createTransport","e","shift","setTransport","on","onDrain","bind","onPacket","onError","reason","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","i","l","probe","packet","onHandshake","JSON","resetPingTimeout","sendPacket","code","filterUpgrades","maxPayload","onOpen","clearTimeoutFn","autoUnref","unref","splice","writable","packets","getWritablePackets","shouldCheckPayloadSize","payloadSize","byteLength","slice","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","removeEventListener","filteredUpgrades","j","Emitter"],"sources":["F:/WebDev/Chat/client/node_modules/engine.io-client/build/cjs/socket.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst index_js_1 = require(\"./transports/index.js\");\nconst util_js_1 = require(\"./util.js\");\nconst parseqs_js_1 = require(\"./contrib/parseqs.js\");\nconst parseuri_js_1 = require(\"./contrib/parseuri.js\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\nclass Socket extends component_emitter_1.Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = (0, parseuri_js_1.parse)(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;\n        }\n        (0, util_js_1.installTimerFunctions)(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                addEventListener(\"beforeunload\", () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                }, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\"\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        debug('creating transport \"%s\"', name);\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = engine_io_parser_1.protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        debug(\"options: %j\", opts);\n        return new index_js_1.transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            debug(\"error while creating transport: %s\", e);\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        debug(\"setting transport %s\", transport.name);\n        if (this.transport) {\n            debug(\"clearing existing transport %s\", this.transport.name);\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", reason => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        debug('probing transport \"%s\"', name);\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            debug('probe transport \"%s\" opened', name);\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    debug('probe transport \"%s\" pong', name);\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    debug('pausing current transport \"%s\"', this.transport.name);\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        debug(\"changing transport and sending upgrade packet\");\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    debug('probe transport \"%s\" failed', name);\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            debug('probe transport \"%s\" failed because of error: %s', name, err);\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        debug(\"socket open\");\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            debug(\"starting upgrade probes\");\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n            debug('packet received with socket readyState \"%s\"', this.readyState);\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            debug(\"flushing %d packets in socket\", packets.length);\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += (0, util_js_1.byteLength)(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        debug(\"payload size is %d (max: %d)\", payloadSize, this.maxPayload);\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            debug(\"socket closing - telling transport to close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        debug(\"socket error %j\", err);\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket close with reason: \"%s\"', reason);\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nexports.Socket = Socket;\nSocket.protocol = engine_io_parser_1.protocol;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}